/*
========================================================================================
    nf-core/aquascope Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
  params {

    // Input options
    input                      = null

    workflow                   = 'aquascope'

    // References
    fasta                      = "${projectDir}/assets/references/SARS-CoV-2.reference.fasta"
    gff			               = "${projectDir}/assets/references/SARS-CoV-2.reference.gff"
    gff3                       = "${projectDir}/assets/references/SARS-CoV-2.reference.gff3"	

    // Freyja barcodes and metadata
    //freyja_repeats             = 1000 //default, change it to at minimum 250 to run it faster
    freyja_db_name             = 'freyja_db'
    freyja_barcodes            = null
    freyja_lineages_meta       = null
    varthresh	               = 0.01

    // Samtools Ampliconclip parameters
    save_cliprejects           = false
    save_clipstats             = false

    // Ivar variant calling options
    save_mpileup               = true

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = 'Aquascope-SARS-CoV-2 Quality Report'
    multiqc_logo               = null
    max_multiqc_email_size     = '30.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = './SARS-COV-2-Results'
    tracedir                   = "${params.outdir}/Pipeline_Info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = false
    show_hidden_params         = false
    schema_ignore_params       = null
    enable_conda               = false
    singularity_pull_docker_container = false
    hook_url                   = null

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                  = [:]
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

if (params.workflow == 'freyja_standalone')  {
    includeConfig 'conf/freyja_standalone.config'
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test_illumina      { includeConfig 'conf/test_illumina.config'      }
    test_ont		{ includeConfig 'conf/test_ont.config'          }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'CDCGov-Aquascope'
    author          = 'Arun Boddapati, Hunter Seabolt, CDC SciComp'
    homePage        = 'https://github.com/CDCgov/aquascope, https://cdcgov.github.io/aquascope/'
    description     = 'Pipeline is for early detection of SC2 variants of concern via shotgun metagenomic sequencing of wastewater'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.02'
    version         = '2.1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
