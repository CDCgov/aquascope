/*
==========================================================================================
    Nextflow config file for Rosalind HPC at CDC
==========================================================================================
    This is a configuration file to run Nextflow pipeline on CDC's Sun Grid Engine, and is 
    configured to optimally schedule jobs to various queues and handles resource limits, 
    which in turn prevents many scheduling errors. This config also sets necessary parameters 
    for Conda and Singularity, and disables Docker. Note that temporary and cache directories 
    are defined below, and you should change them if necessary. This config file should be 
    passed to the Nextflow run command using -C, which will overwrite default configs.
----------------------------------------------------------------------------------------
*/

/*
==========================================================================================
    You may load in config files here which may contain necessary parameters for your pipeline.
==========================================================================================
*/

// includeConfig 'path/to/your.config'

/*
==========================================================================================
    Default institutional and max resource paramters - subject to overwrite.
==========================================================================================
*/

params {
  config_profile_description = 'Rosalind HPC @ CDC'
  config_profile_contact = 'OAMD'
  config_profile_url = 'https://info.biotech.cdc.gov/info/'
  custom_config_version = 'master'

  // Below line will result in an error if there is no --outdir parameter in your workflow.
  //tracedir = "${params.outdir}/pipeline_info"
  
  // Ignore validation schema params
  //schema_ignore_params = "validationSchemaIgnoreParams"

  // Default resource parameters. Expecting to be overwritten.
  max_memory                 = '128.GB'
  max_cpus                   = 16
  max_time                   = '240.h'
}

/*
==========================================================================================
    Environment variables
==========================================================================================
*/

env {
  // Sets options for the Java runtime instance.
  NFX_OPTS="-Xms=512m -Xmx=8g"
}

/*
==========================================================================================
    CDC Local, Rosalind, Conda, and Singularity sge profiles
==========================================================================================
*/

profiles {
  singularity {
    // Enable Singularity features.
    singularity.enabled    = true
    singularity.autoMounts = true

    // Disable other container software.
    docker.enabled         = false
    conda.enabled          = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    
    // Prevents mounting errors in Singularity container creation caused by bad TMPDIR creation.
    process {
        scratch = false
    }
  }
  conda {
    // Enable Conda features.
    conda.enabled = true
    conda.useMamba = true
    
    // Prevents timeout errors. Increase as needed.
    conda.createTimeout    = "120 min"

    // Disable other container software
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false

    // Prevents Conda create/activate environment errors.
    process {
      beforeScript = 'source /etc/profile'
      module = ['miniconda3/20230728']
    }
  }
  local {
    executor {
      name = 'local'
      queueSize = 6
    }
    process {
      executor = 'local'
      memory = '16.GB'
      cpus = 6
      time = '24.h'
    }
  }
  gpu {
    executor {
      name = 'sge'
      queueSize = 5
      pollInterval = '10sec'
      submitRateLimit = '2sec'
    }
    process {
      executor = 'sge'
      queue = 'gpu.q'
      clusterOptions = { "-l gpu=1" }
    }
  }
  rosalind {
    executor {
      name = 'sge'
      queueSize = 12
      pollInterval = '10sec'
      submitRateLimit = '2sec'
    }
    process {
      // Executor information
      executor = 'sge'
      //jobName = { "$task.name - $task.hash" }
      penv = 'smp'
      queue = { task.time <= 4.h ? 'short.q' : task.time > 7.day ? 'long.q' : 'all.q' }

      // Disable docker by default
      docker.enabled = false

      // Default resources - expected to be overwritten
      memory = '32.GB'
      cpus = 12
      time = '72.h'

      // Set h_vmem option for qsub submissions. +20 memory to h_vmem prevents memory allocation errors.
      clusterOptions = { "-l h_vmem=${(check_max((task.memory.toGiga())+20), 'memory').toString().replaceAll(/[\sB]/,'')}G" }

      // Error handling - increases resources on each retry. Try to ignore errors and continue if not in errors listed.
      errorStrategy = { task.exitStatus in [143,137,104,134,139,140,71,255] ? 'retry' : 'ignore' }
      maxRetries    = 3
      maxErrors     = '-1'
    }
  }
  training {
    executor {
      name = 'sge'
      queueSize = 12
      pollInterval = '10sec'
      submitRateLimit = '2sec'
    }
    process {
      // Executor information
      executor = 'sge'
      //jobName = { "$task.name - $task.hash" }
      penv = 'smp'
      queue = 'testing.q'

      // Disable docker by default
      docker.enabled = false

      // Default resources - expected to be overwritten
      memory = '24.GB'
      cpus = 4
      time = '8.h'

      // Set h_vmem option for qsub submissions. +20 memory to h_vmem prevents memory allocation errors.
      clusterOptions = { "-l h_vmem=${(check_max((task.memory.toGiga())+20), 'memory').toString().replaceAll(/[\sB]/,'')}G" }

      // Error handling - increases resources on each retry.
      errorStrategy = { task.exitStatus in [143,137,104,134,139,140,71,255] ? 'retry' : 'ignore' }
      maxRetries    = 3
      maxErrors     = '-1'
    }
  }
}

/*
==========================================================================================
    Capture exit codes from upstream processes when piping
==========================================================================================
*/

//process.shell = ['/bin/bash', '-euo', 'pipefail']

// Using standard shell configuration may help prevent certain errors
process.shell = ['/bin/bash']

/*
==========================================================================================
    Nextflow Metrics & Reports
==========================================================================================
*/
//def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

//timeline {
//   enabled = true
//    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
//}
//report {
//    enabled = true
//    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
//}
//trace {
//    enabled = true
//    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
//}
//dag {
//    enabled = true
//    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
//}

/*
==========================================================================================
    Function to check max resources
==========================================================================================
*/

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
